#!/bin/sh
#|-*- mode:lisp -*-|#
#|Register a file as a template.
exec ros -Q -m roswell -L sbcl-bin -- $0 "$@"
|#

#|

ros [options] template add [OPTIONS] TEMPLATE ARGS...

* each argument is separated by --, instead of being surrounded by parentheses.
* &key, &optional, &rest corresponds to --key, --optional, --rest, respectively.
* Abbreviation as -k, -o, -r are available.

|#

#-ros.match
(ros:include "match")
#-ros.util
(ros:include "util")

(defpackage :ros.script.template
  (:use :cl :ros.util :ros.match :alexandria))

(in-package :ros.script.template)

(defun usage ()
  (format *error-output* "Usage: ros [options] template [SUBCOMMAND] [[OPTIONS] TEMPLATE ARGS...]~%")
  (format *error-output* "subcommands:~%")
  (finish-output *error-output*) (finish-output)
  (format t "~&~{~(~a~)~%~}" '(add rm show list)) ;; this also serves as the bash completion candidates
  (ros:quit 1))

(defun main (&rest argv)
  (match argv
    ((list* _ _ "list" _)
     (list-templates))
    ((list _ _ "add")
     (list-templates :files))
    ((list _ _ "show")
     (list-templates :templates))
    ((list _ _ "rm")
     (list-templates :templates))
    ((list* _ _ "add" argv)
     (add-template argv))
    ((list* _ _ "rm" argv)
     (rm-template argv))
    ((list* _ _ "show" argv)
     (show-template argv))
    (_
     (usage))))

(defvar *template-dir* (merge-pathnames "templates/" (homedir)))
(ensure-directories-exist *template-dir*)
;;; ros template add

(defun slurp (stream)
  "http://www.ymeme.com/slurping-a-file-common-lisp-83.html"
  (let ((seq (make-array (file-length stream)
                         :element-type 'character
                         :fill-pointer t)))
    (setf (fill-pointer seq) (read-sequence seq stream))
    seq))

(defun read-file-to-string (path)
  (with-input-from-file (s path)
    (slurp s)))

(defun read-file (path)
  (with-input-from-file (s path)
    (loop for o = (read s nil '+eof+)
          until (eq o '+eof+)
          collect o)))

(defvar *if-exists* :error)
(defvar *name* nil)
(defun add-template (args)
  (match args
    ((list* "-f" rest)           (let ((*if-exists* :overwrite)) (add-template rest)))
    ((list* "--force" rest)      (let ((*if-exists* :overwrite)) (add-template rest)))
    ((list* "--r" rest)          (error "not implemented yet") #+nil (add-template-recursive rest))
    ((list* "--recursive" rest)  (error "not implemented yet") #+nil (add-template-recursive rest))
    ((list* "--name" *name* rest) (add-template rest))
    ((list* template args)
     (assert (probe-file template))
     (with-open-file (s (make-pathname :directory (pathname-directory *template-dir*)
                                       :defaults (or *name* template))
                        :direction :output
                        :if-does-not-exist :create
                        :if-exists *if-exists*)
       (write (list :arguments (parse-args args)
                    :source (read-file-to-string template))
              :stream s)))))

(defvar *required*)
(defvar *optional*)
(defvar *rest*)
(defvar *keywords*)

(defun parse-args (args)
  (let (*required* *optional* *rest* *keywords*)
    (parse-required args)
    (list *required* *optional* *rest* *keywords*)))

(defun parse-required (args)
  (ematch args
    ((list* "--" _)            (error "unexpected use of --"))
    ((list* "--key" rest)      (parse-keywords rest))
    ((list* "-k" rest)         (parse-keywords rest))
    ((list* "--optional" rest) (parse-optional rest))
    ((list* "-o" rest)         (parse-optional rest))
    ((list* "--rest" rest)     (parse-rest rest))
    ((list* "-r" rest)         (parse-rest rest))
    ((list* name rest)         (push name *required*) (parse-required rest))
    (nil                       )))

(defun parse-optional (args)
  (symbol-macrolet ((p1 (push (list name "") *optional*))
                    (p2 (push (list name default) *optional*)))
    (ematch args
      ((list* "--" _) (error "unexpected use of --"))
      ((list* name "--key" rest)  p1 (parse-keywords rest))
      ((list* name "-k" rest)     p1 (parse-keywords rest))
      ((list* name "--rest" rest) p1 (parse-rest rest))
      ((list* name "-r" rest)     p1 (parse-rest rest))
      ((list* name "--" rest)     p1 (parse-optional rest))
      ((list  name)               p1)
      ((list* name default "--key" rest)  p2 (parse-keywords rest))
      ((list* name default "-k" rest)     p2 (parse-keywords rest))
      ((list* name default "--rest" rest) p2 (parse-rest rest))
      ((list* name default "-r" rest)     p2 (parse-rest rest))
      ((list* name default "--" rest)     p2 (parse-optional rest))
      ((list  name default)     p2))))

(defun parse-keywords (args)
  (symbol-macrolet ((p1 (push (list name "") *keywords*))
                    (p2 (push (list name default) *keywords*)))
    (ematch args
      ((list* "--" _) (error "unexpected use of --"))
      ((list* name "--rest" rest) p1 (parse-rest rest))
      ((list* name "-r" rest)     p1 (parse-rest rest))
      ((list* name "--" rest)     p1 (parse-keywords rest))
      ((list  name)               p1)
      ((list* name default "--rest" rest) p2 (parse-rest rest))
      ((list* name default "-r" rest)     p2 (parse-rest rest))
      ((list* name default "--" rest)     p2 (parse-keywords rest))
      ((list  name default)     p2))))

(defun parse-rest (args)
  (ematch args
    ((list* "--" _) (error "unexpected use of --"))
    ((list* _ rest) (error ">2 arguments after rest arguments"))
    ((list  name) (setf name *rest*))))

;;; ros template rm

(defun rm-template (argv)
  (let ((argv (mapcar #'pathname argv)))
    (assert (every (lambda (path) (null (pathname-directory path))) argv)
            nil "do not specify a template file in a subdirectory of a directory template")
    (dolist (path argv)
      (let ((path (merge-pathnames path *template-dir*)))
        (when (probe-file path)
          (format t "; deleting a template ~a~%" path)
          (delete-file path))))))

(defun show-template (argv)
  (dolist (path (mapcar #'pathname argv))
    (handler-case
        (let ((abs (merge-pathnames path *template-dir*)))
          (ematch (first (read-file abs))
           ((list :arguments (list required optional keywords rest) :source src)
            (format t "~&; Template -- ~a ~{~a ~}~
                           ~@[&optional ~{~a ~}~] ~
                           ~@[&key ~{~a ~}~] ~
                           ~@[&rest ~{~a ~}~]~%"
                    path required optional keywords rest)
            (format t "~&; Absolute path -- ~a~%" abs)
            (format t   "; Template Body~%")
            (format t "; ====== starts from this line =====~%~a~%"  src)
            (format t "; ======       ends here       =====~%"))))
      (file-error ()
        (format t "Template file ~a does not exist" path)))))

(defun list-templates (&optional completion-style)
  (flet ((output () 
           (format t "~{~a~%~}"
                   (sort (remove "default"
                                 (mapcar #'enough-namestring
                                         (directory (make-pathname :name :wild :type :wild)))
                                 :test #'string=)
                         #'string<))))
    (match completion-style
      (nil
       ;; normal output as a "ros template list" subcommand
       (let ((*default-pathname-defaults*  *template-dir*))
         (output)))
      (:files
       ;; list files as the candidates
       (format *error-output* "error: Missing arguments. Candidates:~%")
       (finish-output *error-output*)
       (output))
      (:templates
       (format *error-output* "error: Missing arguments. Candidates:~%")
       (finish-output *error-output*)
       (let ((*default-pathname-defaults*  *template-dir*))
         (output))))))

;;; vim: set ft=lisp lisp:
